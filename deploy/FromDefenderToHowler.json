{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.36.177.2456",
      "templateHash": "13666170720217483345"
    }
  },
  "parameters": {
    "logicAppName": {
      "type": "string",
      "defaultValue": "SnowyOwl",
      "maxLength": 80,
      "metadata": {
        "description": "Name of the Logic App"
      }
    },
    "keyVaultName": {
      "type": "string",
      "defaultValue": "Owlery",
      "metadata": {
        "description": "Name of keyvault to store API key"
      }
    },
    "APIKEY": {
      "type": "string",
      "defaultValue": "your-api-key-here"
    },
    "APIURL": {
      "type": "string",
      "defaultValue": "https://howler/api/v1/sentinel/ingest",
      "metadata": {
        "description": "URL of the Howler API"
      }
    },
    "storageAccountName": {
      "type": "string",
      "defaultValue": "trunks",
      "minLength": 3,
      "maxLength": 24,
      "metadata": {
        "description": "Name of the storage account to store the cursor"
      }
    },
    "tableName": {
      "type": "string",
      "defaultValue": "SnowyOwlCursor",
      "metadata": {
        "description": "Name of the table to store the cursor"
      }
    },
    "recurrenceInterval": {
      "type": "int",
      "defaultValue": 5,
      "metadata": {
        "description": "Recurrence interval in minutes for the Logic App"
      }
    }
  },
  "variables": {
    "location": "[resourceGroup().location]"
  },
  "resources": {
    "storageAccount": {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2024-01-01",
      "name": "[parameters('storageAccountName')]",
      "location": "[variables('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2"
    },
    "tableService": {
      "type": "Microsoft.Storage/storageAccounts/tableServices",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
      "dependsOn": [
        "storageAccount"
      ]
    },
    "table": {
      "type": "Microsoft.Storage/storageAccounts/tableServices/tables",
      "apiVersion": "2024-01-01",
      "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', parameters('tableName'))]",
      "dependsOn": [
        "tableService"
      ]
    },
    "tableWebConnection": {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[format('connection-{0}-{1}', parameters('storageAccountName'), parameters('tableName'))]",
      "location": "[variables('location')]",
      "properties": {
        "displayName": "[format('connection-{0}-{1}', parameters('storageAccountName'), parameters('tableName'))]",
        "customParameterValues": {},
        "parameterValueSet": {
          "name": "managedIdentityAuth"
        },
        "api": {
          "id": "[format('/subscriptions/{0}/providers/Microsoft.Web/locations/{1}/managedApis/azuretables', subscription().subscriptionId, resourceGroup().location)]"
        }
      }
    },
    "keyVaultWebConnection": {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[format('connection-{0}', parameters('keyVaultName'))]",
      "location": "[variables('location')]",
      "properties": {
        "displayName": "[format('connection-{0}', parameters('keyVaultName'))]",
        "customParameterValues": {},
        "parameterValueType": "Alternative",
        "alternativeParameterValues": {
          "vaultName": "[parameters('keyVaultName')]"
        },
        "api": {
          "id": "[format('/subscriptions/{0}/providers/Microsoft.Web/locations/{1}/managedApis/keyvault', subscription().subscriptionId, resourceGroup().location)]"
        }
      }
    },
    "keyVault": {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2024-12-01-preview",
      "name": "[parameters('keyVaultName')]",
      "location": "[variables('location')]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "tenantId": "[subscription().tenantId]",
        "accessPolicies": []
      }
    },
    "keyVaultSecret": {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2024-12-01-preview",
      "name": "[format('{0}/{1}', parameters('keyVaultName'), 'APIKEY')]",
      "properties": {
        "value": "[parameters('APIKEY')]",
        "attributes": {
          "enabled": true
        }
      },
      "dependsOn": [
        "keyVault"
      ]
    },
    "logicApp": {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2017-07-01",
      "name": "[parameters('logicAppName')]",
      "location": "[variables('location')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "GRAPH_API_BASE": {
              "defaultValue": "https://graph.microsoft.com",
              "type": "String"
            },
            "HOWLER_API_URL": {
              "defaultValue": "[parameters('APIURL')]",
              "type": "String"
            },
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            }
          },
          "triggers": {
            "Recurrence": {
              "recurrence": {
                "interval": "[parameters('recurrenceInterval')]",
                "frequency": "Minute"
              },
              "evaluatedRecurrence": {
                "interval": "[parameters('recurrenceInterval')]",
                "frequency": "Minute"
              },
              "type": "Recurrence",
              "description": "[format('Every {0} minutes', parameters('recurrenceInterval'))]"
            }
          },
          "actions": {
            "Get_current_time": {
              "runAfter": {},
              "type": "Expression",
              "kind": "CurrentTime",
              "inputs": {}
            },
            "Get_cursor": {
              "runAfter": {},
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azuretables']['connectionId']"
                  }
                },
                "method": "get",
                "path": "[format('/v2/storageAccounts/@{{encodeURIComponent(encodeURIComponent(''trunks''))}}/tables/@{{encodeURIComponent(''{0}'')}}/entities', parameters('tableName'))]",
                "queries": {
                  "$select": "PointInTime"
                }
              }
            },
            "Get_all_incident_updates": {
              "runAfter": {
                "Get_cursor": [
                  "Succeeded"
                ],
                "Get_current_time": [
                  "Succeeded"
                ],
                "Get_secret": [
                  "Succeeded"
                ]
              },
              "type": "Http",
              "inputs": {
                "uri": "@{parameters('GRAPH_API_BASE')}/v1.0/security/incidents",
                "method": "GET",
                "queries": {
                  "$filter": "lastUpdateDateTime ge @{coalesce(body('Get_cursor')['value'][0]['PointInTime'],addHours(utcNow(),-1))}",
                  "$expand": "alerts"
                },
                "authentication": {
                  "type": "ManagedServiceIdentity",
                  "audience": "@{parameters('GRAPH_API_BASE')}"
                }
              },
              "description": "",
              "runtimeConfiguration": {
                "paginationPolicy": {
                  "minimumItemCount": 10000
                },
                "contentTransfer": {
                  "transferMode": "Chunked"
                }
              }
            },
            "Get_secret": {
              "runAfter": {},
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['keyvault']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/secrets/@{encodeURIComponent('APIKEY')}/value"
              },
              "runtimeConfiguration": {
                "secureData": {
                  "properties": [
                    "inputs",
                    "outputs"
                  ]
                }
              }
            },
            "Data_Ingest": {
              "actions": {
                "For_each_incident": {
                  "foreach": "@body('Get_all_incident_updates')['value']",
                  "actions": {
                    "Push_incident_to_Howler": {
                      "runAfter": {
                        "Incident_Details": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "uri": "@parameters('HOWLER_API_URL')",
                        "method": "POST",
                        "headers": {
                          "Content-Type": "application/json",
                          "Authorization": "basic @{body('Get_secret')?['value']}"
                        },
                        "body": "@items('For_each_incident')"
                      },
                      "description": "No chunking"
                    },
                    "Incident_Details": {
                      "type": "Compose",
                      "inputs": "@items('For_each_incident')"
                    }
                  },
                  "type": "Foreach"
                }
              },
              "runAfter": {
                "Get_all_incident_updates": [
                  "Succeeded"
                ]
              },
              "type": "Scope"
            },
            "Update_cursor_with_execution_time": {
              "runAfter": {
                "Data_Ingest": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azuretables']['connectionId']"
                  }
                },
                "method": "put",
                "body": {
                  "PointInTime": "@{body('Get_current_time')}"
                },
                "path": "[format('/v2/storageAccounts/@{{encodeURIComponent(encodeURIComponent(''trunks''))}}/tables/@{{encodeURIComponent(''{0}'')}}/entities(PartitionKey=''@{{encodeURIComponent(''Cursor'')}}'',RowKey=''@{{encodeURIComponent(''Recurrence'')}}'')', parameters('tableName'))]"
              }
            },
            "In_case_of_failure": {
              "runAfter": {
                "Data_Ingest": [
                  "Failed",
                  "TimedOut"
                ]
              },
              "type": "Compose",
              "inputs": "Do something"
            }
          },
          "outputs": {}
        },
        "parameters": {
          "$connections": {
            "value": {
              "azuretables": {
                "id": "[format('/subscriptions/{0}/providers/Microsoft.Web/locations/{1}/managedApis/azuretables', subscription().subscriptionId, resourceGroup().location)]",
                "connectionId": "[resourceId('Microsoft.Web/connections', format('connection-{0}-{1}', parameters('storageAccountName'), parameters('tableName')))]",
                "connectionName": "azuretables",
                "connectionProperties": {
                  "authentication": {
                    "type": "ManagedServiceIdentity"
                  }
                }
              },
              "keyvault": {
                "id": "[format('/subscriptions/{0}/providers/Microsoft.Web/locations/{1}/managedApis/keyvault', subscription().subscriptionId, resourceGroup().location)]",
                "connectionId": "[resourceId('Microsoft.Web/connections', format('connection-{0}', parameters('keyVaultName')))]",
                "connectionName": "keyvault",
                "connectionProperties": {
                  "authentication": {
                    "type": "ManagedServiceIdentity"
                  }
                }
              }
            }
          }
        }
      },
      "dependsOn": [
        "keyVaultWebConnection",
        "tableWebConnection"
      ]
    },
    "tableContributorRole": {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
      "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), 'Storage Table Data Contributor')]",
      "properties": {
        "principalId": "[reference('logicApp', '2017-07-01', 'full').identity.principalId]",
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3')]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "logicApp",
        "storageAccount"
      ]
    },
    "keyVaultReaderRole": {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
      "name": "[guid(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), 'Key Vault Secrets User')]",
      "properties": {
        "principalId": "[reference('logicApp', '2017-07-01', 'full').identity.principalId]",
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6')]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "keyVault",
        "logicApp"
      ]
    }
  }
}